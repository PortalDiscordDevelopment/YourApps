// Define configuration for the database
generator client {
  provider = "prisma-client-js"
  output   = "./client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum Language {
  EN_US
}

enum PositionState {
  OPEN
  CLOSED
}

enum QuestionType {
  TEXT
  NUMBER
}

// User schema
model User {
  // The discord ID of the user
  id       BigInt    @id
  // The language of the user (if manually set)
  language Language? @default(EN_US)
}

// Guild scheman
model Guild {
  // The ID of the guild
  id              BigInt     @id
  // The channel to log configuration changes and new submissions to
  logChannel      BigInt?    @map("log_channel")
  // The channel to archive all reviewed applications to
  archiveChannel  BigInt?    @map("archive_channel")
  // The roles to ping when an application is submitted
  submissionPings BigInt[]   @default([]) @map("submission_pings")
  // The roles that are considered "admin" and are allowed to change the bot configuration
  adminRoles      BigInt[]   @default([]) @map("admin_roles")
  // The roles that are considered "reviewers" and are allowed to review submissions
  reviewRoles     BigInt[]   @default([]) @map("review_roles")
  // Roles that are blacklisted from applying to positions
  blacklistRoles  BigInt[]   @default([]) @map("blacklist_roles")
  // If this guild had legacy premium or not
  legacyPremium   Boolean    @default(false) @map("legacy_premium")
  // The positions in this guild
  positions       Position[]
}

model Position {
  // An autoincrementing ID for this position
  id              Int                @id @default(autoincrement())
  // The ID of the guild that contians this position
  guildId         BigInt
  // The database guild that contains this position
  guild           Guild              @relation(fields: [guildId], references: [id])
  // The name of this position
  name            String
  // The description of this position
  description     String?
  // The reward roles for this position
  rewardRoles     BigInt[]           @default([]) @map("reward_roles")
  // The remove roles for this position
  removeRoles     BigInt[]           @default([]) @map("remove_roles")
  // The required roles for this position
  requiredRoles   BigInt[]           @default([]) @map("required_roles")
  // The ID of the custom command for this position
  customCommandId BigInt?            @map("custom_command_id")
  // State (open, closed)
  state           PositionState      @default(CLOSED)
  // Cooldown (how long people have to wait before applying again)
  cooldown        BigInt             @default(0)
  // Minimum join time (how long people have to be in a server to apply for the position)
  minimumJoinTime BigInt             @default(0)
  // The actual questions for this position
  positions       PositionQuestion[]
}

model PositionQuestion {
  id         Int          @id @default(autoincrement())
  type       QuestionType @default(TEXT)
  question   String
  positionId Int
  position   Position     @relation(fields: [positionId], references: [id])
}
